let feeds=[],filteredFeeds=[],editingFeedId=null,feedValidationCache=new Map;const fileInput=document.getElementById("fileInput"),uploadArea=document.querySelector(".upload-area");function handleFileUpload(e){const t=e.target.files[0];t&&handleFile(t)}function handleFile(e){if(!e.name.toLowerCase().endsWith(".opml")&&!e.name.toLowerCase().endsWith(".xml"))return void showNotification("Please select an OPML or XML file","error");const t=new FileReader;t.onload=function(e){try{parseOPML(e.target.result),showNotification("OPML file loaded successfully!","success")}catch(e){showNotification("Error parsing OPML file: "+e.message,"error")}},t.readAsText(e)}function parseOPML(e){const t=(new DOMParser).parseFromString(e,"text/xml");if(t.getElementsByTagName("parsererror").length>0)throw new Error("Invalid XML format");const n=t.getElementsByTagName("outline");feeds=[];for(let e=0;e<n.length;e++){const t=n[e],d=t.getAttribute("xmlUrl"),l=t.getAttribute("htmlUrl");d&&feeds.push({id:e,title:t.getAttribute("title")||t.getAttribute("text")||"Untitled Feed",xmlUrl:d,htmlUrl:l||d,description:t.getAttribute("description")||"",category:t.getAttribute("category")||t.getAttribute("type")||"",selected:!0,validationStatus:"unknown"})}if(0===feeds.length)throw new Error("No valid feeds found in OPML file");filteredFeeds=[...feeds],renderFeeds(),showFeedsSection(),updateStats()}function renderFeeds(){const e=document.getElementById("feedsGrid");e.innerHTML="",0!==filteredFeeds.length?(filteredFeeds.forEach((t=>{const n=document.createElement("div");n.className=`feed-card ${t.selected?"selected":""} fade-in`;const d=getValidationStatusHtml(t),l=t.category?`<div class="feed-category">${escapeHtml(t.category)}</div>`:"";n.innerHTML=`\n                    <div class="feed-header">\n                        <div class="feed-title">\n                            ${escapeHtml(t.title)}\n                            ${d}\n                        </div>\n                        <div class="checkbox ${t.selected?"checked":""}" onclick="toggleFeed(${t.id})"></div>\n                    </div>\n                    <div class="feed-url">${escapeHtml(t.xmlUrl)}</div>\n                    ${t.description?`<div class="feed-description">${escapeHtml(t.description)}</div>`:""}\n                    ${l}\n                    <div class="feed-actions">\n                        <button class="btn feed-edit-btn" onclick="editFeed(${t.id})">‚úèÔ∏è Edit</button>\n                        <button class="btn feed-preview-btn" onclick="previewFeed(${t.id})">üëÄ Preview</button>\n                        <a href="${escapeHtml(t.htmlUrl)}" target="_blank" class="btn secondary">üîó Visit</a>\n                        <a href="${escapeHtml(t.xmlUrl)}" target="_blank" class="btn secondary">üì° RSS</a>\n                    </div>\n                `,e.appendChild(n)})),updateFeedsCount()):e.innerHTML='\n                    <div class="empty-state">\n                        <div class="empty-icon">üîç</div>\n                        <div class="empty-text">No feeds match your search</div>\n                        <div class="empty-subtext">Try adjusting your search terms</div>\n                    </div>\n                '}function toggleFeed(e){const t=feeds.find((t=>t.id===e));t&&(t.selected=!t.selected,renderFeeds(),updateStats())}function selectAll(){feeds.forEach((e=>e.selected=!0)),renderFeeds(),updateStats(),showNotification("All feeds selected","info")}function deselectAll(){feeds.forEach((e=>e.selected=!1)),renderFeeds(),updateStats(),showNotification("All feeds deselected","info")}function removeSelected(){const e=feeds.filter((e=>e.selected)).length;0!==e?confirm(`Are you sure you want to remove ${e} selected feed(s)?`)&&(feeds=feeds.filter((e=>!e.selected)),filterFeeds(),updateStats(),showNotification(`${e} feed(s) removed`,"success")):showNotification("No feeds selected for removal","error")}function filterFeeds(){const e=document.getElementById("searchInput").value.toLowerCase();filteredFeeds=feeds.filter((t=>t.title.toLowerCase().includes(e)||t.xmlUrl.toLowerCase().includes(e)||t.description.toLowerCase().includes(e)||t.category&&t.category.toLowerCase().includes(e))),renderFeeds()}function showFeedsSection(){document.getElementById("feedsSection").style.display="block",document.getElementById("emptyState").style.display="none"}function updateFeedsCount(){const e=filteredFeeds.length,t=feeds.length;document.getElementById("feedsCount").textContent=e===t?`${e} feeds loaded`:`${e} of ${t} feeds shown`}function updateStats(){const e=feeds.length,t=feeds.filter((e=>e.selected)).length;document.getElementById("totalFeeds").textContent=e,document.getElementById("selectedFeeds").textContent=t}function exportOPML(){const e=feeds.filter((e=>e.selected));if(0===e.length)return void showNotification("No feeds selected for export","error");const t=document.getElementById("exportText");t.innerHTML='<span class="loading"></span>Generating...',setTimeout((()=>{downloadOPML(generateOPML(e)),t.innerHTML="üì• Download OPML",showNotification(`${e.length} feeds exported successfully!`,"success")}),1e3)}function generateOPML(e){const t=(new Date).toUTCString();let n=`<?xml version="1.0" encoding="UTF-8"?>\n<opml version="2.0">\n    <head>\n        <title>My RSS Feeds</title>\n        <dateCreated>${t}</dateCreated>\n        <dateModified>${t}</dateModified>\n        <ownerName>OPML Feed Manager</ownerName>\n    </head>\n    <body>\n`;return e.forEach((e=>{n+=`        <outline text="${escapeXml(e.title)}" title="${escapeXml(e.title)}" type="rss" xmlUrl="${escapeXml(e.xmlUrl)}" htmlUrl="${escapeXml(e.htmlUrl)}"`,e.description&&(n+=` description="${escapeXml(e.description)}"`),e.category&&(n+=` category="${escapeXml(e.category)}"`),n+="/>\n"})),n+="    </body>\n</opml>",n}function downloadOPML(e){const t=new Blob([e],{type:"application/xml"}),n=URL.createObjectURL(t),d=document.createElement("a");d.href=n,d.download=`feeds_${(new Date).toISOString().split("T")[0]}.opml`,document.body.appendChild(d),d.click(),document.body.removeChild(d),URL.revokeObjectURL(n)}function showNotification(e,t){const n=document.createElement("div");n.className=`notification ${t}`,n.textContent=e,document.body.appendChild(n),setTimeout((()=>n.classList.add("show")),100),setTimeout((()=>{n.classList.remove("show"),setTimeout((()=>document.body.removeChild(n)),300)}),3e3)}function escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}function escapeXml(e){return e.replace(/[<>&'"]/g,(function(e){switch(e){case"<":return"&lt;";case">":return"&gt;";case"&":return"&amp;";case"'":return"&apos;";case'"':return"&quot;"}}))}function showAddFeedModal(){editingFeedId=null,document.getElementById("modalTitle").textContent="Add New RSS Feed",document.getElementById("saveButtonText").textContent="Add Feed",document.getElementById("feedForm").reset(),updateCategoryList(),document.getElementById("feedModal").style.display="flex"}function editFeed(e){const t=feeds.find((t=>t.id===e));t&&(editingFeedId=e,document.getElementById("modalTitle").textContent="Edit RSS Feed",document.getElementById("saveButtonText").textContent="Save Changes",document.getElementById("feedTitle").value=t.title,document.getElementById("feedUrl").value=t.xmlUrl,document.getElementById("feedWebsite").value=t.htmlUrl||"",document.getElementById("feedDescription").value=t.description||"",document.getElementById("feedCategory").value=t.category||"",updateCategoryList(),document.getElementById("feedModal").style.display="flex")}function closeFeedModal(){document.getElementById("feedModal").style.display="none",editingFeedId=null}function updateCategoryList(){const e=[...new Set(feeds.map((e=>e.category)).filter(Boolean))];document.getElementById("categoryList").innerHTML=e.map((e=>`<option value="${escapeHtml(e)}">`)).join("")}function validateFeedUrl(){const e=document.getElementById("feedUrl").value.trim();if(!e)return void showNotification("Please enter a feed URL first","error");const t=event.target,n=t.textContent;t.textContent="‚è≥ Checking...",t.disabled=!0,validateSingleFeed(e).then((e=>{e.valid?(showNotification("Feed URL is valid!","success"),e.title&&!document.getElementById("feedTitle").value&&(document.getElementById("feedTitle").value=e.title),e.htmlUrl&&!document.getElementById("feedWebsite").value&&(document.getElementById("feedWebsite").value=e.htmlUrl)):showNotification(`Feed validation failed: ${e.error}`,"error")})).catch((e=>{showNotification(`Validation error: ${e.message}`,"error")})).finally((()=>{t.textContent=n,t.disabled=!1}))}function autoFillWebsite(){const e=document.getElementById("feedUrl").value.trim();if(e)try{const t=new URL(e),n=`${t.protocol}//${t.host}`;document.getElementById("feedWebsite").value=n,showNotification("Website URL auto-filled","info")}catch(e){showNotification("Could not extract website URL","error")}else showNotification("Please enter a feed URL first","error")}async function validateSingleFeed(e){try{const t=await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(e)}`),n=await t.json();if(!n.contents)throw new Error("Unable to fetch feed content");const d=(new DOMParser).parseFromString(n.contents,"text/xml");if(!d.querySelector("rss, feed, channel"))throw new Error("Not a valid RSS/Atom feed");const l=d.querySelector("title, channel > title")?.textContent?.trim(),i=d.querySelector("link, channel > link")?.textContent?.trim();return{valid:!0,title:l,htmlUrl:i}}catch(e){return{valid:!1,error:e.message}}}function validateAllFeeds(){if(0===feeds.length)return void showNotification("No feeds to validate","info");document.getElementById("validationResults").innerHTML='<div class="loading-spinner">Validating feeds...</div>',document.getElementById("validationModal").style.display="flex";const e=feeds.map((e=>validateSingleFeed(e.xmlUrl).then((t=>({feed:e,result:t})))));Promise.all(e).then((e=>{displayValidationResults(e),e.forEach((({feed:e,result:t})=>{e.validationStatus=t.valid?"valid":"invalid",e.validationError=t.error,feedValidationCache.set(e.xmlUrl,t)})),renderFeeds()}))}function displayValidationResults(e){const t=e.filter((e=>e.result.valid)),n=e.filter((e=>!e.result.valid));let d=`\n                <div style="margin-bottom: 20px;">\n                    <h4>Validation Summary</h4>\n                    <p>‚úÖ ${t.length} valid feeds | ‚ùå ${n.length} invalid feeds</p>\n                </div>\n            `;e.forEach((({feed:e,result:t})=>{d+=`\n                    <div class="validation-item">\n                        <div class="validation-icon">${t.valid?"‚úÖ":"‚ùå"}</div>\n                        <div class="validation-details">\n                            <h4>${escapeHtml(e.title)}</h4>\n                            <p>${escapeHtml(e.xmlUrl)}</p>\n                            ${t.error?`<p style="color: #d32f2f; font-weight: 500;">${escapeHtml(t.error)}</p>`:""}\n                        </div>\n                    </div>\n                `})),document.getElementById("validationResults").innerHTML=d}function closeValidationModal(){document.getElementById("validationModal").style.display="none"}function getValidationStatusHtml(e){if(!e.validationStatus||"unknown"===e.validationStatus)return"";const t={valid:{text:"Valid",class:"status-valid"},invalid:{text:"Invalid",class:"status-invalid"},checking:{text:"Checking",class:"status-checking"}}[e.validationStatus];return t?`<span class="feed-validation-status ${t.class}">${t.text}</span>`:""}async function previewFeed(e){const t=feeds.find((t=>t.id===e));if(t){document.getElementById("previewTitle").textContent=`Preview: ${t.title}`,document.getElementById("previewContent").innerHTML='<div class="loading-spinner">Loading feed preview...</div>',document.getElementById("previewModal").style.display="flex";try{const e=await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(t.xmlUrl)}`),n=await e.json();if(!n.contents)throw new Error("Unable to fetch feed content");const d=new DOMParser;displayFeedPreview(t,d.parseFromString(n.contents,"text/xml"))}catch(e){document.getElementById("previewContent").innerHTML=`\n                    <div style="text-align: center; padding: 40px; color: #d32f2f;">\n                        <p>‚ùå Failed to load feed preview</p>\n                        <p style="font-size: 14px; color: #666;">${escapeHtml(e.message)}</p>\n                    </div>\n                `}}}function displayFeedPreview(e,t){const n=t.querySelector("title, channel > title")?.textContent?.trim()||e.title,d=t.querySelector("description, channel > description")?.textContent?.trim()||"",l=t.querySelectorAll("item, entry");let i=`\n                <div class="preview-feed-info">\n                    <h3>${escapeHtml(n)}</h3>\n                    ${d?`<p>${escapeHtml(d.substring(0,200))}...</p>`:""}\n                    <p><strong>Feed URL:</strong> <a href="${escapeHtml(e.xmlUrl)}" target="_blank">${escapeHtml(e.xmlUrl)}</a></p>\n                    ${e.htmlUrl?`<p><strong>Website:</strong> <a href="${escapeHtml(e.htmlUrl)}" target="_blank">${escapeHtml(e.htmlUrl)}</a></p>`:""}\n                </div>\n            `;l.length>0?(i+='<div class="preview-articles">',i+=`<h4>Recent Articles (${Math.min(l.length,5)} of ${l.length})</h4>`,Array.from(l).slice(0,5).forEach((e=>{const t=e.querySelector("title")?.textContent?.trim()||"Untitled",n=e.querySelector("description, summary")?.textContent?.trim()||"",d=e.querySelector("pubDate, published, updated")?.textContent?.trim()||"";i+=`\n                        <div class="preview-article">\n                            <h4>${escapeHtml(t)}</h4>\n                            ${n?`<p>${escapeHtml(n.substring(0,150))}...</p>`:""}\n                            ${d?`<div class="article-meta">Published: ${escapeHtml(new Date(d).toLocaleDateString())}</div>`:""}\n                        </div>\n                    `})),i+="</div>"):i+="<p>No recent articles found in this feed.</p>",document.getElementById("previewContent").innerHTML=i}function closePreviewModal(){document.getElementById("previewModal").style.display="none"}fileInput.addEventListener("change",handleFileUpload),uploadArea.addEventListener("dragover",(e=>{e.preventDefault(),uploadArea.classList.add("dragover")})),uploadArea.addEventListener("dragleave",(()=>{uploadArea.classList.remove("dragover")})),uploadArea.addEventListener("drop",(e=>{e.preventDefault(),uploadArea.classList.remove("dragover");const t=e.dataTransfer.files;t.length>0&&handleFile(t[0])})),document.getElementById("searchInput").addEventListener("input",filterFeeds),document.addEventListener("keydown",(e=>{if(e.ctrlKey||e.metaKey)switch(e.key){case"a":e.preventDefault(),selectAll();break;case"d":e.preventDefault(),deselectAll();break;case"s":e.preventDefault(),feeds.length>0&&exportOPML();break;case"f":e.preventDefault(),document.getElementById("searchInput").focus();break}})),updateStats(),document.getElementById("feedForm").addEventListener("submit",(function(e){e.preventDefault();const t=new FormData(e.target),n={title:t.get("title").trim(),xmlUrl:t.get("xmlUrl").trim(),htmlUrl:t.get("htmlUrl").trim()||t.get("xmlUrl").trim(),description:t.get("description").trim(),category:t.get("category").trim()};if(n.title&&n.xmlUrl){if(null!==editingFeedId){const e=feeds.find((e=>e.id===editingFeedId));e&&(Object.assign(e,n),showNotification("Feed updated successfully!","success"))}else{const e=Math.max(...feeds.map((e=>e.id)),0)+1;feeds.push({id:e,selected:!0,validationStatus:"unknown",...n}),showNotification("Feed added successfully!","success")}filterFeeds(),updateStats(),closeFeedModal()}else showNotification("Please fill in required fields","error")})),window.addEventListener("click",(function(e){["feedModal","previewModal","validationModal"].forEach((t=>{const n=document.getElementById(t);e.target===n&&(n.style.display="none")}))})),document.addEventListener("keydown",(e=>{if("Escape"===e.key){const e=document.querySelector('.modal[style*="flex"]');if(e)return void(e.style.display="none")}if(e.ctrlKey||e.metaKey)switch(e.key){case"a":e.preventDefault(),selectAll();break;case"d":e.preventDefault(),deselectAll();break;case"s":e.preventDefault(),feeds.length>0&&exportOPML();break;case"f":e.preventDefault(),document.getElementById("searchInput").focus();break;case"n":e.preventDefault(),showAddFeedModal();break}}));