const API_BASE="https://api.github.com/repos/",CACHE_EXPIRY=3e5,searchInput=document.querySelector(".search-input"),resultContainer=document.querySelector(".result-container"),getCachedData=e=>{const t=localStorage.getItem(`repo_${e}`);if(!t)return null;const{data:a,timestamp:s}=JSON.parse(t);return Date.now()-s>3e5?(localStorage.removeItem(`repo_${e}`),null):a},setCacheData=(e,t)=>{const a={data:t,timestamp:Date.now()};localStorage.setItem(`repo_${e}`,JSON.stringify(a))},fetchRepoData=async(e,t=!1)=>{try{const a=getCachedData(e);if(a&&!t){if(!await showRefreshConfirm())return void displayRepoInfo(...Object.values(a),!0)}resultContainer.innerHTML='<div class="loading">Fetching repository data...</div>';const[s,n,o,r,i]=await Promise.all([fetch(`${API_BASE}${e}`),fetch(`${API_BASE}${e}/languages`),fetch(`${API_BASE}${e}/contributors?per_page=10`),fetch(`${API_BASE}${e}/pulls?state=all&per_page=5`),fetch(`${API_BASE}${e}/releases?per_page=5`)]);if(403===s.status)throw new Error("GitHub API rate limit reached. Please try again later.");if(!s.ok)throw new Error("Repository not found");const l=await s.json(),c=await n.json(),d=await o.json(),u=await r.json(),v=await i.json();setCacheData(e,{repo:l,languages:c,contributors:d,pulls:u,releases:v}),displayRepoInfo(l,c,d,u,v)}catch(e){resultContainer.innerHTML=`\n                    <div class="error">\n                        <h3>⚠️ ${e.message}</h3>\n                       ${e.message.includes("rate limit")?"<p>Too many requests. Please wait a few minutes.</p>":""}\n                    </div>`}},showRefreshConfirm=()=>new Promise((e=>{const t=document.createElement("div");t.className="refresh-dialog",t.innerHTML=`\n                    <div class="refresh-content">\n                        <p>Cached data available. Refresh?</p>\n                        <button onclick="this.closest('.refresh-dialog').remove(); ${e(!1)}">Use Cached</button>\n                        <button onclick="this.closest('.refresh-dialog').remove(); ${e(!0)}">Refresh</button>\n                    </div>\n                `,document.body.appendChild(t)})),displayRepoInfo=(e,t,a,s,n,o=!1)=>{if(!e)return void(resultContainer.innerHTML='<div class="no-results">No repository found for this path.</div>');const r=Object.values(t).reduce(((e,t)=>e+t),0),i=Object.entries(t).map((([e,t])=>`<div class="language-bar" title="${e}: ${(t/r*100).toFixed(1)}%" \n             style="width: ${t/r*100}%; background: ${getRandomColor()}"></div>`)).join(""),l=a.map((e=>`\n                <a href="${e.html_url}" class="contributor" target="_blank">\n                    <img src="${e.avatar_url}" alt="${e.login}" class="contributor-avatar">\n                    <span>${e.login}</span>\n                </a>\n            `)).join(""),c=new Date(e.updated_at),d=(e=>{const t=((new Date).getTime()-e.getTime())/1e3,a={year:31536e3,month:2592e3,week:604800,day:86400,hour:3600,minute:60};for(let[e,s]of Object.entries(a)){const a=Math.floor(t/s);if(a>=1)return`${a} ${e}${1===a?"":"s"} ago`}return"just now"})(c),u=c.toLocaleString();resultContainer.innerHTML=`\n                <div class="repo-card">\n                    <div class="repo-header">\n                        <img src="${e.owner.avatar_url}" alt="${e.owner.login}" class="repo-avatar">\n                        <div>\n                            <h2 class="repo-title">${e.full_name}</h2>\n                            <p>${e.description||"No description provided"}</p>\n                        </div>\n                    </div>\n                    <div class="repo-meta">\n                        <div class="meta-item">\n                            <span class="tag">${e.visibility}</span>\n                            <span>${e.default_branch}</span>\n                        </div>\n                         <div class="meta-item">\n                            <span class="last-updated" title="${u}">Last updated: ${d}</span>\n                        </div>\n                    </div>\n                    <div class="repo-stats">\n                        <div class="stat-item">\n                            <div class="stat-value">${e.stargazers_count.toLocaleString()}</div>\n                            <div class="stat-label">Stars</div>\n                        </div>\n                        <div class="stat-item">\n                            <div class="stat-value">${e.forks_count.toLocaleString()}</div>\n                            <div class="stat-label">Forks</div>\n                        </div>\n                        <div class="stat-item">\n                            <div class="stat-value">${e.open_issues_count.toLocaleString()}</div>\n                            <div class="stat-label">Issues</div>\n                        </div>\n                          <div class="stat-item">\n                              <div class="stat-value">${Array.isArray(s)?s.length.toLocaleString():"0"}</div>\n                              <div class="stat-label">Pull Requests</div>\n                          </div>\n                    </div>\n\n                    <h3>Languages</h3>\n                    <div class="language-chart">${i}</div>\n\n                    <h3>Top Contributors</h3>\n                    <div class="contributors">${l}</div>\n                     ${o?'<p class="cached-indicator">Data loaded from cache</p>':""}\n                </div>\n            `},getRandomColor=()=>`hsl(${360*Math.random()}, 70%, 50%)`;searchInput.addEventListener("keypress",(e=>{if("Enter"===e.key){const e=searchInput.value.trim();e&&fetchRepoData(e)}})),searchInput.addEventListener("focus",(()=>{searchInput.classList.add("focused")})),searchInput.addEventListener("blur",(()=>{searchInput.classList.remove("focused")}));const addFocusStyle=()=>{const e=document.activeElement;e&&e.classList.add("focused-element")},removeFocusStyle=e=>{const t=document.activeElement;t&&e.relatedTarget!==t&&t.classList.remove("focused-element")};document.addEventListener("focusin",addFocusStyle),document.addEventListener("focusout",removeFocusStyle);